#!/usr/bin/env ruby

require "rubygems"
require "bundler/setup"

require "crowddirector/scrape"
require "trollop"

progname = File.basename($0)

opts = Trollop::options do
  version "#{progname} #{CrowdDirector::VERSION}"

  banner <<-EOB
Usage: #{progname} -e email {-p pass|-f passfile}
                   -r resource [-j cookiejar]

EOB

  opt :email, "CrowdDirector email",
      :short => "-e", :required => true, :type => :string
  opt :pass, "CrowdDirector password",
      :short => "-p", :type => :string
  opt :passfile, "File containing CrowdDirector password",
      :short => "-f", :type => :string
  opt :resource, "Network resource ID to check",
       :short => "-r", :required => true, :type => :string

banner <<-EOB
          You can locate the resource ID by logging in to the CrowdDirector
          Dashboard, editing the network resource, and taking the last URL
          component after a "/" (seems to always be an integer).
 EOB
  banner ""

  opt :jar, "Path to cookie jar file",
       :short => "-j", :type => :string

banner <<-EOB
          Optionally specify the path to a "cookie jar" to store a
          session cookie. Without a cookie jar, each invocation of
          the check will have to complete the login process.
EOB
  banner ""
end

if opts[:pass] and opts[:passfile]
  Trollop::die "can't specify pass and passfile"
end

if opts[:pass].nil? and opts[:passfile].nil?
  Trollop::die "must specify a pass or passfile"
end

if opts[:passfile]
  opts[:pass] = File.read(opts[:passfile]).chomp rescue nil
  if opts[:pass].nil?
    Trollop::die "could not read passfile #{opts[:passfile]}"
  end
end

cd = CrowdDirector::Scrape.new(opts[:email], opts[:pass], opts[:jar])
begin
  nr = cd.network_resources
rescue CrowdDirector::Error
  puts "UNKNOWN: error fetching network_resources: #{$!}"
  exit 3
end

r = nr[opts[:resource]]
if r.nil?
  puts "UNKNOWN: resource id #{opts[:resource]} not found"
  exit 3
end

desc = "id=#{opts[:resource]} type=#{r["resource_type"]} "

if r["dns_base_url"] and !r["dns_base_url"].empty?
  desc += "dns_host=#{r["dns_base_url"]}"
elsif r["base_url"] and !r["base_url"].empty?
  desc += "base_url=#{r["base_url"]}"
else
  puts "UNKNOWN: resource id #{opts[:resource]} has unknown type, #{r.inspect}"
  exit 3
end

state = r["current_health_state"]
if state == 0
  puts "CRITICAL: #{desc} is down (state #{state})"
  exit 2
elsif state == 1
  puts "OK: #{desc} is up (state #{state})"
  exit 0
end

puts "UNKNOWN: resource id #{opts[:resource]} has an unknown health " +
      "state: #{state}"
exit 3
